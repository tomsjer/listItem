{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/client/Controllers/AppController.js","app/scripts/client/Controllers/Controller.js","app/scripts/client/Models/Model.js","app/scripts/client/Views/View.js","app/scripts/client/app.js","app/scripts/client/counter.js","app/scripts/client/index.js","app/scripts/client/itemActive.js","app/scripts/client/itemList.js","app/scripts/client/notifications.js","app/scripts/client/wsconnection.js","app/scripts/utils/debugHelpers.js","app/scripts/utils/imagesLoaded.js","app/scripts/utils/store.js","app/templates/App.hbs","app/templates/Counter.hbs","app/templates/ItemActive.hbs","app/templates/ItemList.hbs","app/templates/Notifications.hbs","config.json","node_modules/atoa/atoa.js","node_modules/contra/debounce.js","node_modules/contra/emitter.js","node_modules/crossvent/src/crossvent.js","node_modules/crossvent/src/eventmap.js","node_modules/custom-event/index.js","node_modules/dragula/classes.js","node_modules/dragula/dragula.js","node_modules/events/events.js","node_modules/handlebars/lib/handlebars.runtime.js","node_modules/handlebars/lib/handlebars/base.js","node_modules/handlebars/lib/handlebars/decorators.js","node_modules/handlebars/lib/handlebars/decorators/inline.js","node_modules/handlebars/lib/handlebars/exception.js","node_modules/handlebars/lib/handlebars/helpers.js","node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/each.js","node_modules/handlebars/lib/handlebars/helpers/helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/if.js","node_modules/handlebars/lib/handlebars/helpers/log.js","node_modules/handlebars/lib/handlebars/helpers/lookup.js","node_modules/handlebars/lib/handlebars/helpers/with.js","node_modules/handlebars/lib/handlebars/logger.js","node_modules/handlebars/dist/cjs/handlebars/node_modules/handlebars/lib/handlebars/no-conflict.js","node_modules/handlebars/lib/handlebars/runtime.js","node_modules/handlebars/lib/handlebars/safe-string.js","node_modules/handlebars/lib/handlebars/utils.js","node_modules/handlebars/runtime.js","node_modules/hbsfy/runtime.js","node_modules/ticky/ticky-browser.js"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;;ACAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChmsB,mBAAmB;;IAA7B,IAAI;;;;;oCAIO,0BAA0B;;;;mCAC3B,wBAAwB;;;;+BACvB,oBAAoB;;IAA/B,KAAK;;iCACQ,sBAAsB;;IAAnC,OAAO;;oCAEI,0BAA0B;;;;;AAGjD,SAAS,MAAM,GAAG;AAChB,MAAI,EAAE,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;;AAE1C,OAAK,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AACvB,IAAE,CAAC,UAAU,oCAAa,CAAC;AAC3B,IAAE,CAAC,SAAS,mCAAY,CAAC;AACzB,IAAE,CAAC,KAAK,GAAG,KAAK,CAAC;AACjB,IAAE,CAAC,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;;AAE7C,I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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Controller from './Controller.js';\n\nexport default class AppController extends Controller {\n  constructor(opts) {\n    super(opts);\n\n    this.children = opts.children;\n    this.views = this.children.map(children => children.view);\n\n    this.view.on('beforeDestroy', this.destroySubViews.bind(this));\n    this.view.on('afterRender', this.appendSubViews.bind(this));\n\n  }\n  destroySubViews() {\n\n    this.views.forEach(view => view.destroy());\n  }\n  appendSubViews() {\n    console.log('after render');\n    this.views.forEach(view => view.render());\n  }\n}\n","import EventEmitter from 'events';\n\nexport default class Controller extends EventEmitter {\n  constructor(opts) {\n    super(opts);\n    this.model = opts.model;\n    this.view = opts.view;\n    this.events = opts.events;\n\n    this.view.on('change', this.updateModel.bind(this));\n    this.view.on('afterRender', this.bindEvents.bind(this));\n    this.view.on('beforeDestroy', this.unbindEvents.bind(this));\n    this.model.on('change', this.updateView.bind(this));\n\n    this.view.setModel(this.model);\n\n    // Maybe leave concrete implementation to instance.\n    if(!this.view.noUpdate) {\n     // this.view.render();\n    }\n  }\n  render() {\n    this.view.render();\n  }\n  updateModel(attribute, value) {\n    this.model.set(attribute, value);\n  }\n  updateView(prop) {\n    if(!this.view.noUpdate) {\n      this.view.update(prop);\n    }\n  }\n  bindEvents() {\n    for(const i in this.events) {\n      this.view.on(i, this.events[i]);\n    }\n  }\n  unbindEvents() {\n    for(const i in this.events) {\n      this.view.removeListener(i, this.events[i]);\n    }\n  }\n}\n","import EventEmitter from 'events';\n\nexport default class Model extends EventEmitter {\n  constructor(opts) {\n    super(opts);\n    this.attributes = opts.attributes;\n  }\n  set(attr, value, bulk = false) {\n    this.attributes[attr] = value;\n    if(!bulk) {\n      this.emit('change', attr);\n      console.log('modelChanged: ', attr, value);\n    }\n  }\n  setBulk(props) {\n    for (const i in props) {\n      this.set(i, props[i], true);\n    }\n    this.emit('change');\n    console.log('modelChanged: ', this.getJSON());\n  }\n  get(attr) {\n    return this.attributes[attr];\n  }\n  getJSON() {\n    return this.attributes;\n  }\n}\n","import EventEmitter from 'events';\n\nexport default class View extends EventEmitter {\n  constructor(opts) {\n    super(opts);\n\n    this.noUpdate = opts.noUpdate || false;\n    this.container = opts.container;\n    this.model = opts.model;\n    this.events = opts.events;\n    this.template = opts.template;\n\n    this.on('upate', this.update);\n    this.on('afterRender', this.bindEvents);\n    this.on('beforeDestroy', this.unbindEvents);\n\n    this.render();\n  }\n  update(prop) {\n    if (this.noUpdate) { return; }\n    this.destroy();\n    this.render();\n  }\n  render() {\n    const container = typeof this.container === 'string' ?\n                      document.querySelector(this.container) : this.container;\n    if (container) {\n      this.emit('beforeRender');\n      container.innerHTML = this.template(this.model.getJSON());\n      this.emit('afterRender');\n    }\n    else {\n       console.log(`[view #render] this.container [${this.container}] is null`);\n    }\n  }\n  destroy() {\n    const container = typeof this.container === 'string' ?\n                      document.querySelector(this.container) : this.container;\n    if (container) {\n      this.emit('beforeDestroy');\n      container.innerHTML = '';\n      this.emit('afterDestroy');\n    }\n    else {\n      console.log(`[view #destroy] this.container [${this.container}] is null`);\n    }\n  }\n  bindEvents() {\n    for (const i in this.events) {\n      const arr = i.split(':');\n      const selector = `[data-bind=\"${arr[0]}\"]`;\n      const event = arr[1];\n      const handler = typeof this.events[i] === 'function' ? this.events[i].bind(this) : this[this.events[i]].bind(this);\n      const container = typeof this.container === 'string' ?\n                      document.querySelector(this.container) : this.container;\n      const el = container.querySelectorAll(selector);\n      if(el) {\n        el.forEach(e => e.addEventListener(event, handler.bind(this)));\n      }\n    }\n  }\n  unbindEvents() {\n    for (const i in this.events) {\n      const arr = i.split(':');\n      const selector = `[data-bind=\"${arr[0]}\"]`;\n      const event = arr[1];\n      const handler = typeof this.events[i] === 'function' ? this.events[i] : this[this.events[i]];\n      const container = typeof this.container === 'string' ?\n                      document.querySelector(this.container) : this.container;\n      const el = container.querySelectorAll(selector);\n      if(el) {\n        el.forEach(e => e.removeEventListener(event, handler));\n      }\n    }\n  }\n  setModel(model) {\n    this.model = model;\n  }\n}\n","import Model from './Models/Model.js';\nimport View from './Views/View.js';\nimport AppController from './Controllers/AppController.js';\nimport ItemList from './itemList.js';\nimport ItemActive from './itemActive.js';\nimport Counter from './counter.js';\n\nimport store from '../utils/store.js';\nimport Notifications from './notifications.js';\n\nexport default class App {\n  constructor(opts) {\n\n\n    this.model = new Model({\n      attributes: opts.model.attributes,\n    });\n\n    this.view = new View({\n      // noUpdate: true,\n      model: this.model,\n      container: document.querySelector('.app'),\n      events: {\n        'addItem:click': function addItem(e) {\n          e.preventDefault();\n          const items = this.model.get('items').slice(0);\n          items.push({\n            img: null,\n            txt: null,\n          });\n          this.model.setBulk({\n            'items': items,\n            'itemEdit': true,\n            'itemActive': items.length - 1,\n            'itemNew': true,\n          });\n        },\n      },\n      template: require('../../templates/App.hbs'),\n    });\n\n    // Maintaining a consistent interface, store could be  localStorage/DB/...\n    this.store = store;\n    \n    this.notifications = new Notifications({\n      model: {\n        attributes: {\n          action: 'in',\n          state: 'info',\n          msg: 'Loading items...',\n          autohide: true,\n          showProgress: false\n        },\n      },\n      view: {\n        container: '.notifications-container',\n        template: require('../../templates/Notifications.hbs'),\n      },\n    });\n    this.view.once('afterRender', ()=>{\n      this.notifications.view.render()\n    })\n\n    const self = this;\n    const children = [\n      new ItemList({\n        model: this.model,\n        events: {\n          'deleteItem': function deleteItem(e) {\n\n            self.deleteItem.call(self, e);\n            e.cancelBubble = true;\n          },\n          'reorderItem': this.reorderItem.bind(this),\n          'startEdit': function startEdit(e) {\n            this.model.setBulk({\n              'itemEdit': true,\n              'itemNew': false,\n              'itemActive': e.currentTarget.parentNode.dataset.index,\n            });\n          }.bind(this),\n        },\n      }),\n      new ItemActive({\n        model: this.model,\n        events: {\n          'addItem': this.addItem.bind(this),\n          'startEdit': function startEdit() {\n            this.model.setBulk({\n              'itemEdit': true,\n              'itemNew': false\n            });\n          }.bind(this),\n          'updateItem': this.updateItem.bind(this),\n        },\n      }),\n      new Counter({\n        model: this.model,\n        events: {\n\n        },\n      })\n    ];\n\n    this.controller = new AppController({\n      model: this.model,\n      view: this.view,\n      children: children,\n    });\n\n    this.preloaderWrapper = document.querySelector('.preloader-wrapper');\n    this.getItems();\n  }\n  getModel() {\n    return this.controller.model.getJSON();\n  }\n  setModel(props) {\n    this.controller.model.setBulk(props);\n    return this.controller.model.getJSON();\n  }\n  getItems() {\n    this.store.getItems()\n    .then((result)=> {\n      this.setModel({\n        loading: false,\n        items: result.items,\n      });\n      setTimeout(()=>{\n        this.notifications.model.setBulk({\n          action: 'out',\n          msg: 'Done!',\n          state: 'success',\n        });\n        this.preloaderWrapper.style.opacity = 0;\n      }, 1000);\n      setTimeout(()=>{\n        this.preloaderWrapper.remove();\n      }, 2000);\n    });\n  }\n  addItem(e) {\n\n    const fd = this.prepareFormSubmit(e);\n\n    this.notifications.model.setBulk({\n      action: 'in',\n      state: 'info',\n      msg: 'Saving item...',\n      showProgress: true,\n    });\n\n    this.store.saveItem(fd)\n    .then((response)=>{\n      if(!response.code) {\n        // setTimeout(()=>{\n          this.setModel({ items: response.items, itemEdit: false });\n        // }, 500);\n        this.notifications.model.setBulk({\n          action: 'out',\n          state: 'success',\n          msg: 'Saved! :)',\n          showProgress: false,\n        });\n      }\n      else {\n        this.notifications.model.setBulk({\n          autohide: false,\n          action: 'out',\n          state: 'error',\n          msg: 'Something went wrong... :(',\n          showProgress: false,\n        });\n      }\n    });\n  }\n  reorderItem(prevIndex, currIndex) {\n    this.notifications.model.setBulk({\n      action: 'in',\n      state: 'info',\n      msg: 'Saving list...',\n    });\n    this.store.saveItems(prevIndex, currIndex)\n    .then((response)=>{\n      if(!response.code) {\n        this.setModel({ items: response.items });\n        this.notifications.model.setBulk({\n          action: 'out',\n          state: 'success',\n          msg: 'Saved! :)',\n        });\n      }\n      else {\n        this.notifications.model.setBulk({\n          autohide: false,\n          action: 'out',\n          state: 'error',\n          msg: 'Something went wrong... :(',\n        });\n      }\n    });\n  }\n  updateItem(e) {\n    const fd = this.prepareFormSubmit(e);\n    const index = this.model.get('itemActive');\n    fd.append('index', index);\n\n    this.notifications.model.setBulk({\n      action: 'in',\n      state: 'info',\n      msg: 'Saving item...',\n      showProgress: true,\n    });\n    this.store.updateItem(fd)\n    .then((response)=>{\n      if(!response.code) {\n        this.setModel({ items: response.items, itemEdit: false });\n        this.notifications.model.setBulk({\n          action: 'out',\n          state: 'success',\n          msg: 'Saved! :)',\n          showProgress: false,\n        });\n      }\n      else {\n        this.notifications.model.setBulk({\n          autohide: false,\n          action: 'out',\n          state: 'error',\n          msg: 'Something went wrong... :(',\n        });\n      }\n    });\n  }\n  deleteItem(e) {\n    const index = e.currentTarget.parentNode.dataset.index;\n\n    this.notifications.model.setBulk({\n      action: 'in',\n      state: 'info',\n      msg: 'Deleting item...',\n    });\n    this.store.deleteItem({ index: index })\n    .then((response)=>{\n      if(!response.code) {\n        this.setModel({\n          items: response.items,\n          itemEdit: false,\n          itemActive: response.items.length - 1\n        });\n        this.notifications.model.setBulk({\n          action: 'out',\n          state: 'success',\n          msg: 'Deleted item!',\n        });\n      }\n      else {\n        this.notifications.model.setBulk({\n          autohide: false,\n          action: 'out',\n          state: 'error',\n          msg: 'Something went wrong... :(',\n        });\n      }\n    });\n  }\n  prepareFormSubmit(e) {\n    const file = e.target.querySelector('input[type=\"file\"]').files[0];\n    const name = 'img';\n    const txt = e.target.querySelector('textarea').value; // No safe string checks?\n    const fd = new FormData();\n\n    fd.append(name, file);\n    fd.append('txt', txt);\n\n    return fd;\n  }\n}\n","import View from './Views/View.js';\nimport Controller from './Controllers/Controller.js';\nimport Handlebars from 'hbsfy/runtime';\n\nHandlebars.registerHelper('addOne', function(options) {\n  const cont = options.fn(this) | 0;\n  return cont + 1;\n});\n\nexport default class Counter {\n  constructor(opts) {\n    this.model = opts.model;\n    this.view = new View({\n      model: this.model,\n      container: '.counter',\n      events: {\n\n      },\n      template: require('../../templates/Counter.hbs'),\n    });\n    this.controller = new Controller({\n      model: this.model,\n      view: this.view,\n    });\n  }\n}\n","import config from '../../../config.json';\nimport App from './app.js';\nimport { bindKeyToState } from '../utils/debugHelpers.js';\n\nfunction init() {\n  const app = new App({\n    model: {\n      attributes: {\n        items: [],\n        itemActive: 0,\n        itemEdit: false,\n        views: [],\n        loading: false,\n        showTooltip: true,\n      },\n    },\n  });\n\n  if(config.debug) {\n    bindKeyToState(app, {\n      '49': { // 1\n        'loading': true,\n        'itemEdit': false,\n      },\n      '50': { // 2\n        'loading': false,\n        'itemEdit': false,\n        'items': [],\n      },\n      '51': { // 3\n        'loading': false,\n        'itemEdit': false,\n        'items': [\n          { img: 'http://placehold.it/320x320', txt: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. ' },\n          { img: 'http://placehold.it/320x320', txt: 'Recusandae facere tempore qui voluptatibus placeat voluptas consequuntur neque ut necessitatibus vitae' },\n          { img: 'http://placehold.it/320x320', txt: 'Perspiciatis eveniet in ipsam sed quae, praesentium nihil. Possimus, qui.' },\n          { img: 'http://placehold.it/320x320', txt: 'Consectetur adipisicing elit. Quae at expedita, illo? Beatae aut vitae ullam, veritatis recusandae temporibus dignissimos error quibusdam, voluptates nihil architecto magni ipsam at repellendus soluta.' },\n          { img: 'http://placehold.it/320x320', txt: 'Lorem qewipsum' },\n          { img: 'http://placehold.it/320x320', txt: 'ITEMMMMMMMMM' },\n          { img: 'http://placehold.it/320x320', txt: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. ' },\n          { img: 'http://placehold.it/320x320', txt: 'Recusandae facere tempore qui voluptatibus placeat voluptas consequuntur neque ut necessitatibus vitae' },\n          { img: 'http://placehold.it/320x320', txt: 'Perspiciatis eveniet in ipsam sed quae, praesentium nihil. Possimus, qui.' },\n          { img: 'http://placehold.it/320x320', txt: 'Consectetur adipisicing elit. Quae at expedita, illo? Beatae aut vitae ullam, veritatis recusandae temporibus dignissimos error quibusdam, voluptates nihil architecto magni ipsam at repellendus soluta.' },\n          { img: 'http://placehold.it/320x320', txt: 'Lorem qewipsum' },\n          { img: 'http://placehold.it/320x320', txt: 'Lorqwewqem ipsum' },\n        ],\n      },\n      '52': { // 4\n        'loading': false,\n        'itemEdit': true,\n        'items': [\n          { img: 'http://placehold.it/320x320', txt: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. ' },\n        ],\n      },\n    });\n  }\n}\n\n\nwindow.onload = function() {\n  /* development */\n  if(config.livereload) {\n\n    const wsServer = `ws://${config.ip}:${config.port}`;\n    const WsConnection = require('./wsconnection');\n    const ws = new WsConnection({\n      wsServer: wsServer,\n    });\n    ws.init()\n    .then(()=>{\n      init();\n    });\n\n  }\n  else {\n    init();\n  }\n};\n","import View from './Views/View.js';\nimport Controller from './Controllers/Controller.js';\n\nexport default class ItemActive {\n  constructor(opts) {\n\n    this.model = opts.model;\n    \n    this.view = new View({\n      model: this.model,\n      container: '.item-active',\n      events: {\n        'deleteItem:click': function onDelete() {\n          this.emit('deleteItem');\n        },\n        'uploadImg:click': function uploadImg() {\n          const container = document.querySelector(this.container);\n          const input = container.querySelector('input[type=\"file\"]');\n          input.click();\n        },\n        // TODO: set container class (landscape/portrait)\n        // TBD: canvas to allow client-side resize?\n        'file:change': function handleFiles(e) {\n\n          const file = e.target.files[0];\n          const imageType = /^image\\//;\n\n          if (!file || (!imageType.test(file.type))) {\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = function readerOnload(evt) {\n            const container = document.querySelector(this.container);\n            const img = container.querySelector('.item-active-img');\n            img.style.backgroundImage = `url(${evt.target.result})`;\n            img.classList.remove('error');\n\n          }.bind(this);\n          reader.readAsDataURL(file);\n        },\n        'updateText:keyup': function updateText(e) {\n          // Maybe use input to see realtime change on list?\n          // const i = this.model.get('itemActive') | 0;\n          // const items = this.model.get('items').slice(0);\n          // const item = items[i];\n\n          // item.txt = e.currentTarget.value;\n          // items.splice(i, 1, item);\n          // this.model.set('items', items);\n          if(e.keyCode === 13) {\n            e.preventDefault();\n            const container = document.querySelector(this.container);\n            container.querySelector('button[type=\"submit\"]').click();\n          }\n        },\n        'startEdit:click': function startEdit() {\n          this.emit('startEdit');\n        },\n        'form:submit': function finishEdit(e) {\n          e.preventDefault();\n          if(this.model.get('itemNew')) {\n            if(e.target.querySelector('input[type=\"file\"]').files.length) {\n              e.target.querySelector('.item-active-img').classList.remove('error');\n              this.emit('addItem', e);\n            }\n            else {\n              e.target.querySelector('.item-active-img').classList.add('error');\n            }\n          }\n          else {\n            this.emit('updateItem', e);\n          }\n        },\n      },\n      template: require('../../templates/ItemActive.hbs'),\n    });\n    this.view.on('afterRender', function focusTextarea() {\n      const container = document.querySelector(this.container);\n      const textarea = container.querySelector('textarea');\n      if(textarea) {\n        const val = textarea.value;\n        textarea.focus();\n        textarea.setSelectionRange(0, val.length);\n      }\n\n    });\n    this.controller = new Controller({\n      model: this.model,\n      view: this.view,\n      events: opts.events,\n    });\n  }\n}\n","import View from './Views/View.js';\nimport Controller from './Controllers/Controller.js';\nimport imagesLoaded from '../utils/imagesLoaded.js';\nimport Handlebars from 'hbsfy/runtime';\nimport dragula from 'dragula';\n\nHandlebars.registerHelper('isActive', function isActive(options) {\n  let operation;\n  if (options.hash.index === (options.hash.itemActive | 0)) {\n    operation = options.fn(this);\n  }\n  else {\n    operation = options.inverse(this);\n  }\n  return operation;\n});\n\nexport default class ItemList {\n  constructor(opts) {\n    this.view = new View({\n      model: opts.model,\n      container: '.item-list',\n      events: {\n        'item:click': function onClick(e) {\n          const index = e.currentTarget.dataset.index;\n          // this.emit('change', 'itemActive', index);\n          this.model.setBulk({\n            'itemActive': index,\n            'itemEdit': false,\n          });\n        },\n        'deleteItem:click': function onClick(e) {\n          this.emit('deleteItem', e);\n        },\n        'startEdit:click': function startEdit(e) {\n          this.emit('startEdit', e);\n          e.cancelBubble = true;\n        },\n      },\n      template: require('../../templates/ItemList.hbs'),\n    });\n\n    this.view.on('afterRender', function loadImages() {\n      const container = document.querySelector(this.container);\n      container.querySelectorAll('img[data-src]').forEach(el => imagesLoaded(el) );\n    });\n    // Sortable\n    this.view.on('afterRender', function setDragula() {\n\n      const self = this;\n      const container = document.querySelector('.item-list .wrapper');\n      const drake = dragula([container], {\n        mirrorContainer: container,\n      });\n      drake.on('drop', (el, target, source, sibling)=> {\n\n        const prevIndex = el.dataset.index | 0;\n        let currIndex = prevIndex;\n        if(sibling) {\n          currIndex = sibling.classList.contains('gu-mirror') ? -1 : sibling.dataset.index > prevIndex ? (sibling.dataset.index | 0) - 1 : sibling.dataset.index | 0;\n        }\n\n        self.emit('reorderItem', prevIndex, currIndex);\n      });\n    });\n\n    this.controller = new Controller({\n      model: opts.model,\n      view: this.view,\n      events: opts.events\n    });\n  }\n}\n","import Model from './Models/Model.js';\nimport View from './Views/View.js';\nimport Controller from './Controllers/Controller.js';\n\nexport default class Notifications {\n  constructor(opts) {\n    this.model = new Model(opts.model);\n    opts.view.model = this.model;\n    this.view = new View( opts.view );\n    this.controller = new Controller({\n      model: this.model,\n      view: this.view,\n    });\n  }\n}\n","const EventEmitter = require('events');\nconst WSState = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3,\n};\n\nclass WsConnection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.opts = opts;\n    this.setListeners();\n    return this;\n  }\n  setListeners() {\n    this.on('client:reload', (args)=>{\n      if(args.reload) {\n        window.location.reload(true);\n      }\n    });\n    this.on('ws:send:input', function(message) {\n      this.send('wss:client:input',message);\n    });\n  }\n  init() {\n\n    this.ws = new WebSocket(this.opts.wsServer);\n    const promise = new Promise((resolve, reject)=>{\n\n      this.ws.onopen = (response)=>{\n        this.emit('ws:open', response);\n        resolve(response);\n      };\n\n      this.ws.onerror = (err)=>{\n        this.emit('ws:error', err);\n        reject(err);\n      };\n\n      this.ws.onclose = (message)=>{\n        this.emit('ws:close', message);\n      };\n\n      // If wanted to support Binary?\n      this.ws.onmessage = (message)=>{\n        const msg = (message.data.indexOf('{') !== -1) ? JSON.parse(message.data) : {};\n        this.emit(msg.event, msg.args);\n        // console.log('[ws]', msg);\n      };\n    });\n\n    return promise;\n  }\n  send(event, args) {\n    if(this.ws.readyState === WSState.OPEN) {\n      this.ws.send(JSON.stringify({\n        event: event,\n        args: args,\n      }));\n    }\n  }\n  sendPromise(event, args) {\n    const self = this;\n    const promise = new Promise((resolve, reject)=>{\n      self.ws.send(JSON.stringify({\n        event: event,\n        args: args,\n      }));\n\n      self.on(event, (data)=>{\n        resolve(data);\n      });\n    });\n\n    return promise;\n  }\n}\n\nmodule.exports = WsConnection;\n","export function bindKeyToState(app, keys) {\n\n  for (const i in keys) {\n    window.addEventListener('keyup', (e)=> {\n      if (e.keyCode === (i | 0)) {\n        app.setModel(keys[i]);\n      }\n    });\n  }\n}\n","export default function imagesLoaded(el) {\n  const src = el.dataset.src;\n  el.onload = function onLoad() {\n    el.classList.remove('loading');\n  };\n  el.src = src;\n}\n","const store = {\n  getItems:function(){\n    return new Promise((resolve, reject)=>{\n      fetch('/items', {\n        method: 'get',\n        credentials: 'include',\n      })\n      .then(response => response.json())\n      .then((result)=>{\n        resolve(result);\n      });\n    });\n  },\n  saveItem:function(fd) {\n    return new Promise((resolve, reject)=> {\n      fetch('/item', {\n        method: 'post',\n        credentials: 'include',\n        body: fd,\n      })\n      .then(response => response.json())\n      .then((result)=>{\n        resolve(result);\n      });\n    });\n  },\n  saveItems:function(prevIndex, currIndex) {\n    return new Promise((resolve, reject)=> {\n      fetch('/items', {\n        method: 'put',\n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prevIndex: prevIndex,\n          currIndex: currIndex,\n        }),\n      })\n      .then(response => response.json())\n      .then((result)=>{\n        resolve(result);\n      });\n    });\n  },\n  updateItem:function(fd) {\n    return new Promise((resolve, reject)=> {\n      fetch('/item', {\n        method: 'put',\n        credentials: 'include',\n        body: fd,\n      })\n      .then(response => response.json())\n      .then((result)=>{\n        resolve(result);\n      });\n    });\n  },\n  deleteItem:function(json) {\n    return new Promise((resolve, reject)=>{\n      fetch('/item', {\n        method: 'delete',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(json),\n      })\n      .then(response => response.json())\n      .then((result)=>{\n        resolve(result);\n      });\n    });\n  }\n};\n\nexport default store;\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \" loading \";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \" has-items \";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \" no-items \";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"    \\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return \"    <aside class=\\\"item-list\\\"></aside>\\n    <main>\\n      <div class=\\\"item-active \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.itemEdit : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\"></div>\\n      <div class=\\\"counter\\\"></div>\\n      <div class=\\\"tooltip \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.itemEdit : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(12, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\"><p>Clickme to add a new item!</p></div>\\n      <a data-bind=\\\"addItem\\\" href=\\\"#\\\" title=\\\"Clickme to add a new item!\\\" class=\\\"btn btn-add  \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.itemEdit : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(14, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\"><i class=\\\"material-icons\\\">add</i></a>\\n    </main>\\n    <div class=\\\"notifications-container\\\">\\n    </div>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    return \" item-edit \";\n},\"12\":function(container,depth0,helpers,partials,data) {\n    return \" hidden \";\n},\"14\":function(container,depth0,helpers,partials,data) {\n    return \"hidden \";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return \"<div id=\\\"app\\\"\\n  class=\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.loading : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n          \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.program(5, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\"\\n  >\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.loading : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.program(9, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"  Item \";\n  stack1 = ((helper = (helper = helpers.addOne || (depth0 != null ? depth0.addOne : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"addOne\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),options) : helper));\n  if (!helpers.addOne) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \" of \"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.items : depth0)) != null ? stack1.length : stack1), depth0))\n    + \"\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return container.escapeExpression(((helper = (helper = helpers.itemActive || (depth0 != null ? depth0.itemActive : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"itemActive\",\"hash\":{},\"data\":data}) : helper)));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"  0 Items\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<p>\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.items : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(4, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"</p>\";\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.itemEdit : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.program(5, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return ((stack1 = helpers[\"with\"].call(alias1,helpers.lookup.call(alias1,(depth0 != null ? depth0.items : depth0),(depth0 != null ? depth0.itemActive : depth0),{\"name\":\"lookup\",\"hash\":{},\"data\":data}),{\"name\":\"with\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"      <form data-bind=\\\"form\\\" action=\\\"return false\\\">\\n        <div class=\\\"item-active-img\\\" style=\\\"background-image:url('\"\n    + alias4(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"img\",\"hash\":{},\"data\":data}) : helper)))\n    + \"');\\\">\\n          <input data-bind=\\\"file\\\" name=\\\"img\\\" type=\\\"file\\\" class=\\\"hidden\\\"  accept=\\\"image/*\\\">\\n          <a data-bind=\\\"uploadImg\\\" href=\\\"#\\\" class=\\\"btn btn-upload\\\"><i class=\\\"material-icons\\\">file_upload</i></a>\\n          <span class=\\\"error\\\">Please upload an image</span>\\n        </div>\\n        <div class=\\\"item-active-txt\\\">\\n          <textarea data-bind=\\\"updateText\\\" name=\\\"txt\\\" cols=\\\"30\\\" rows=\\\"10\\\" placeholder=\\\"Write your text here...\\\" required maxlength=\\\"300\\\">\"\n    + alias4(((helper = (helper = helpers.txt || (depth0 != null ? depth0.txt : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"txt\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</textarea>\\n        </div>\\n        <button type=\\\"submit\\\" data-bind=\\\"finishEdit\\\" class=\\\"btn btn-ok\\\"><i class=\\\"material-icons\\\">done</i></button>\\n      </form>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return ((stack1 = helpers[\"with\"].call(alias1,helpers.lookup.call(alias1,(depth0 != null ? depth0.items : depth0),(depth0 != null ? depth0.itemActive : depth0),{\"name\":\"lookup\",\"hash\":{},\"data\":data}),{\"name\":\"with\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"  \\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"      <div class=\\\"item-active-img\\\">\\n        <img src=\\\"\"\n    + alias4(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"img\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" >\\n      </div>\\n      <div class=\\\"item-active-txt\\\">\\n          <p>\"\n    + alias4(((helper = (helper = helpers.txt || (depth0 != null ? depth0.txt : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"txt\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</p>\\n      </div>\\n      <a data-bind=\\\"startEdit\\\" href=\\\"#\\\" class=\\\"btn btn-edit\\\"><i class=\\\"material-icons\\\">create</i></a>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    return \"  <div class=\\\"no-items\\\">\\n    <h1>:(</h1>\\n    <p>There are no items yet...</p>\\n  </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.items : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(8, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"useData\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing;\n\n  return \"    <div data-bind=\\\"item\\\" draggable=\\\"true\\\" class=\\\"item \"\n    + ((stack1 = (helpers.isActive || (depth0 && depth0.isActive) || alias2).call(alias1,{\"name\":\"isActive\",\"hash\":{\"itemActive\":(depths[1] != null ? depths[1].itemActive : depths[1]),\"index\":(data && data.index)},\"fn\":container.program(3, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\" data-index=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias2),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"index\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n      <div class=\\\"img-container\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.img : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0, blockParams, depths),\"inverse\":container.program(7, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"      </div>\\n      <div class=\\\"txt-container\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.txt : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0, blockParams, depths),\"inverse\":container.program(11, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"      </div>\\n      <a data-bind=\\\"deleteItem\\\" href=\\\"#\\\" class=\\\"btn btn-sm btn-delete\\\"><i class=\\\"material-icons\\\">clear</i></a>\\n      <a data-bind=\\\"startEdit\\\" href=\\\"#\\\" class=\\\"btn btn-sm btn-edit\\\"><i class=\\\"material-icons\\\">create</i></a>\\n    </div>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"active\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"          <img data-src=\\\"\"\n    + alias4(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"img\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"loading\\\" alt=\\\"\"\n    + alias4(((helper = (helper = helpers.txt || (depth0 != null ? depth0.txt : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"txt\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"          <i class=\\\"material-icons placeholder\\\">photo</i>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"          <p>\"\n    + container.escapeExpression(((helper = (helper = helpers.txt || (depth0 != null ? depth0.txt : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"txt\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</p>\\n\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    return \"  <div class=\\\"no-items\\\"></div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return \"<div class=\\\"wrapper dashed\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.items : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.program(13, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\";\n},\"useData\":true,\"useDepths\":true});\n","// hbsfy compiled Handlebars template\nvar HandlebarsCompiler = require('hbsfy/runtime');\nmodule.exports = HandlebarsCompiler.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \" autohide \";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"progress-bar\\\"></div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div class=\\\"notifications \"\n    + alias4(((helper = (helper = helpers.state || (depth0 != null ? depth0.state : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"state\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + alias4(((helper = (helper = helpers.action || (depth0 != null ? depth0.action : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"action\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.autohide : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n  <p>\"\n    + alias4(((helper = (helper = helpers.msg || (depth0 != null ? depth0.msg : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"msg\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</p>\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.showProgress : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\";\n},\"useData\":true});\n","module.exports={\"srcDir\":\"app\",\"publicDir\":\"public\",\"serverDir\":\"server\",\"port\":8080,\"ip\":\"192.168.0.3\",\"livereload\":false,\"debug\":false}","module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }\n","'use strict';\n\nvar ticky = require('ticky');\n\nmodule.exports = function debounce (fn, args, ctx) {\n  if (!fn) { return; }\n  ticky(function run () {\n    fn.apply(ctx || null, args || []);\n  });\n};\n","'use strict';\n\nvar atoa = require('atoa');\nvar debounce = require('./debounce');\n\nmodule.exports = function emitter (thing, options) {\n  var opts = options || {};\n  var evt = {};\n  if (thing === undefined) { thing = {}; }\n  thing.on = function (type, fn) {\n    if (!evt[type]) {\n      evt[type] = [fn];\n    } else {\n      evt[type].push(fn);\n    }\n    return thing;\n  };\n  thing.once = function (type, fn) {\n    fn._once = true; // thing.off(fn) still works!\n    thing.on(type, fn);\n    return thing;\n  };\n  thing.off = function (type, fn) {\n    var c = arguments.length;\n    if (c === 1) {\n      delete evt[type];\n    } else if (c === 0) {\n      evt = {};\n    } else {\n      var et = evt[type];\n      if (!et) { return thing; }\n      et.splice(et.indexOf(fn), 1);\n    }\n    return thing;\n  };\n  thing.emit = function () {\n    var args = atoa(arguments);\n    return thing.emitterSnapshot(args.shift()).apply(this, args);\n  };\n  thing.emitterSnapshot = function (type) {\n    var et = (evt[type] || []).slice(0);\n    return function () {\n      var args = atoa(arguments);\n      var ctx = this || thing;\n      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }\n      et.forEach(function emitter (listen) {\n        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }\n        if (listen._once) { thing.off(type, listen); }\n      });\n      return thing;\n    };\n  };\n  return thing;\n};\n","'use strict';\n\nvar customEvent = require('custom-event');\nvar eventmap = require('./eventmap');\nvar doc = global.document;\nvar addEvent = addEventEasy;\nvar removeEvent = removeEventEasy;\nvar hardCache = [];\n\nif (!global.addEventListener) {\n  addEvent = addEventHard;\n  removeEvent = removeEventHard;\n}\n\nmodule.exports = {\n  add: addEvent,\n  remove: removeEvent,\n  fabricate: fabricateEvent\n};\n\nfunction addEventEasy (el, type, fn, capturing) {\n  return el.addEventListener(type, fn, capturing);\n}\n\nfunction addEventHard (el, type, fn) {\n  return el.attachEvent('on' + type, wrap(el, type, fn));\n}\n\nfunction removeEventEasy (el, type, fn, capturing) {\n  return el.removeEventListener(type, fn, capturing);\n}\n\nfunction removeEventHard (el, type, fn) {\n  var listener = unwrap(el, type, fn);\n  if (listener) {\n    return el.detachEvent('on' + type, listener);\n  }\n}\n\nfunction fabricateEvent (el, type, model) {\n  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();\n  if (el.dispatchEvent) {\n    el.dispatchEvent(e);\n  } else {\n    el.fireEvent('on' + type, e);\n  }\n  function makeClassicEvent () {\n    var e;\n    if (doc.createEvent) {\n      e = doc.createEvent('Event');\n      e.initEvent(type, true, true);\n    } else if (doc.createEventObject) {\n      e = doc.createEventObject();\n    }\n    return e;\n  }\n  function makeCustomEvent () {\n    return new customEvent(type, { detail: model });\n  }\n}\n\nfunction wrapperFactory (el, type, fn) {\n  return function wrapper (originalEvent) {\n    var e = originalEvent || global.event;\n    e.target = e.target || e.srcElement;\n    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };\n    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };\n    e.which = e.which || e.keyCode;\n    fn.call(el, e);\n  };\n}\n\nfunction wrap (el, type, fn) {\n  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);\n  hardCache.push({\n    wrapper: wrapper,\n    element: el,\n    type: type,\n    fn: fn\n  });\n  return wrapper;\n}\n\nfunction unwrap (el, type, fn) {\n  var i = find(el, type, fn);\n  if (i) {\n    var wrapper = hardCache[i].wrapper;\n    hardCache.splice(i, 1); // free up a tad of memory\n    return wrapper;\n  }\n}\n\nfunction find (el, type, fn) {\n  var i, item;\n  for (i = 0; i < hardCache.length; i++) {\n    item = hardCache[i];\n    if (item.element === el && item.type === type && item.fn === fn) {\n      return i;\n    }\n  }\n}\n","'use strict';\n\nvar eventmap = [];\nvar eventname = '';\nvar ron = /^on/;\n\nfor (eventname in global) {\n  if (ron.test(eventname)) {\n    eventmap.push(eventname.slice(2));\n  }\n}\n\nmodule.exports = eventmap;\n","\nvar NativeCustomEvent = global.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n","'use strict';\n\nvar cache = {};\nvar start = '(?:^|\\\\s)';\nvar end = '(?:\\\\s|$)';\n\nfunction lookupClass (className) {\n  var cached = cache[className];\n  if (cached) {\n    cached.lastIndex = 0;\n  } else {\n    cache[className] = cached = new RegExp(start + className + end, 'g');\n  }\n  return cached;\n}\n\nfunction addClass (el, className) {\n  var current = el.className;\n  if (!current.length) {\n    el.className = className;\n  } else if (!lookupClass(className).test(current)) {\n    el.className += ' ' + className;\n  }\n}\n\nfunction rmClass (el, className) {\n  el.className = el.className.replace(lookupClass(className), ' ').trim();\n}\n\nmodule.exports = {\n  add: addClass,\n  rm: rmClass\n};\n","'use strict';\n\nvar emitter = require('contra/emitter');\nvar crossvent = require('crossvent');\nvar classes = require('./classes');\nvar doc = document;\nvar documentElement = doc.documentElement;\n\nfunction dragula (initialContainers, options) {\n  var len = arguments.length;\n  if (len === 1 && Array.isArray(initialContainers) === false) {\n    options = initialContainers;\n    initialContainers = [];\n  }\n  var _mirror; // mirror image\n  var _source; // source container\n  var _item; // item being dragged\n  var _offsetX; // reference x\n  var _offsetY; // reference y\n  var _moveX; // reference move x\n  var _moveY; // reference move y\n  var _initialSibling; // reference sibling when grabbed\n  var _currentSibling; // reference sibling now\n  var _copy; // item used for copying\n  var _renderTimer; // timer for setTimeout renderMirrorImage\n  var _lastDropTarget = null; // last container item was over\n  var _grabbed; // holds mousedown context until first mousemove\n\n  var o = options || {};\n  if (o.moves === void 0) { o.moves = always; }\n  if (o.accepts === void 0) { o.accepts = always; }\n  if (o.invalid === void 0) { o.invalid = invalidTarget; }\n  if (o.containers === void 0) { o.containers = initialContainers || []; }\n  if (o.isContainer === void 0) { o.isContainer = never; }\n  if (o.copy === void 0) { o.copy = false; }\n  if (o.copySortSource === void 0) { o.copySortSource = false; }\n  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }\n  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }\n  if (o.direction === void 0) { o.direction = 'vertical'; }\n  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }\n  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }\n\n  var drake = emitter({\n    containers: o.containers,\n    start: manualStart,\n    end: end,\n    cancel: cancel,\n    remove: remove,\n    destroy: destroy,\n    canMove: canMove,\n    dragging: false\n  });\n\n  if (o.removeOnSpill === true) {\n    drake.on('over', spillOver).on('out', spillOut);\n  }\n\n  events();\n\n  return drake;\n\n  function isContainer (el) {\n    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);\n  }\n\n  function events (remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousedown', grab);\n    touchy(documentElement, op, 'mouseup', release);\n  }\n\n  function eventualMovements (remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);\n  }\n\n  function movements (remove) {\n    var op = remove ? 'remove' : 'add';\n    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8\n    crossvent[op](documentElement, 'click', preventGrabbed);\n  }\n\n  function destroy () {\n    events(true);\n    release({});\n  }\n\n  function preventGrabbed (e) {\n    if (_grabbed) {\n      e.preventDefault();\n    }\n  }\n\n  function grab (e) {\n    _moveX = e.clientX;\n    _moveY = e.clientY;\n\n    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;\n    if (ignore) {\n      return; // we only care about honest-to-god left clicks and touch events\n    }\n    var item = e.target;\n    var context = canStart(item);\n    if (!context) {\n      return;\n    }\n    _grabbed = context;\n    eventualMovements();\n    if (e.type === 'mousedown') {\n      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208\n        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176\n      } else {\n        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155\n      }\n    }\n  }\n\n  function startBecauseMouseMoved (e) {\n    if (!_grabbed) {\n      return;\n    }\n    if (whichMouseButton(e) === 0) {\n      release({});\n      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope\n    }\n    // truthy check fixes #239, equality fixes #207\n    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {\n      return;\n    }\n    if (o.ignoreInputTextSelection) {\n      var clientX = getCoord('clientX', e);\n      var clientY = getCoord('clientY', e);\n      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);\n      if (isInput(elementBehindCursor)) {\n        return;\n      }\n    }\n\n    var grabbed = _grabbed; // call to end() unsets _grabbed\n    eventualMovements(true);\n    movements();\n    end();\n    start(grabbed);\n\n    var offset = getOffset(_item);\n    _offsetX = getCoord('pageX', e) - offset.left;\n    _offsetY = getCoord('pageY', e) - offset.top;\n\n    classes.add(_copy || _item, 'gu-transit');\n    renderMirrorImage();\n    drag(e);\n  }\n\n  function canStart (item) {\n    if (drake.dragging && _mirror) {\n      return;\n    }\n    if (isContainer(item)) {\n      return; // don't drag container itself\n    }\n    var handle = item;\n    while (getParent(item) && isContainer(getParent(item)) === false) {\n      if (o.invalid(item, handle)) {\n        return;\n      }\n      item = getParent(item); // drag target should be a top element\n      if (!item) {\n        return;\n      }\n    }\n    var source = getParent(item);\n    if (!source) {\n      return;\n    }\n    if (o.invalid(item, handle)) {\n      return;\n    }\n\n    var movable = o.moves(item, source, handle, nextEl(item));\n    if (!movable) {\n      return;\n    }\n\n    return {\n      item: item,\n      source: source\n    };\n  }\n\n  function canMove (item) {\n    return !!canStart(item);\n  }\n\n  function manualStart (item) {\n    var context = canStart(item);\n    if (context) {\n      start(context);\n    }\n  }\n\n  function start (context) {\n    if (isCopy(context.item, context.source)) {\n      _copy = context.item.cloneNode(true);\n      drake.emit('cloned', _copy, context.item, 'copy');\n    }\n\n    _source = context.source;\n    _item = context.item;\n    _initialSibling = _currentSibling = nextEl(context.item);\n\n    drake.dragging = true;\n    drake.emit('drag', _item, _source);\n  }\n\n  function invalidTarget () {\n    return false;\n  }\n\n  function end () {\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    drop(item, getParent(item));\n  }\n\n  function ungrab () {\n    _grabbed = false;\n    eventualMovements(true);\n    movements(true);\n  }\n\n  function release (e) {\n    ungrab();\n\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {\n      drop(item, dropTarget);\n    } else if (o.removeOnSpill) {\n      remove();\n    } else {\n      cancel();\n    }\n  }\n\n  function drop (item, target) {\n    var parent = getParent(item);\n    if (_copy && o.copySortSource && target === _source) {\n      parent.removeChild(_item);\n    }\n    if (isInitialPlacement(target)) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, target, _source, _currentSibling);\n    }\n    cleanup();\n  }\n\n  function remove () {\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    var parent = getParent(item);\n    if (parent) {\n      parent.removeChild(item);\n    }\n    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);\n    cleanup();\n  }\n\n  function cancel (revert) {\n    if (!drake.dragging) {\n      return;\n    }\n    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;\n    var item = _copy || _item;\n    var parent = getParent(item);\n    var initial = isInitialPlacement(parent);\n    if (initial === false && reverts) {\n      if (_copy) {\n        if (parent) {\n          parent.removeChild(_copy);\n        }\n      } else {\n        _source.insertBefore(item, _initialSibling);\n      }\n    }\n    if (initial || reverts) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, parent, _source, _currentSibling);\n    }\n    cleanup();\n  }\n\n  function cleanup () {\n    var item = _copy || _item;\n    ungrab();\n    removeMirrorImage();\n    if (item) {\n      classes.rm(item, 'gu-transit');\n    }\n    if (_renderTimer) {\n      clearTimeout(_renderTimer);\n    }\n    drake.dragging = false;\n    if (_lastDropTarget) {\n      drake.emit('out', item, _lastDropTarget, _source);\n    }\n    drake.emit('dragend', item);\n    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;\n  }\n\n  function isInitialPlacement (target, s) {\n    var sibling;\n    if (s !== void 0) {\n      sibling = s;\n    } else if (_mirror) {\n      sibling = _currentSibling;\n    } else {\n      sibling = nextEl(_copy || _item);\n    }\n    return target === _source && sibling === _initialSibling;\n  }\n\n  function findDropTarget (elementBehindCursor, clientX, clientY) {\n    var target = elementBehindCursor;\n    while (target && !accepted()) {\n      target = getParent(target);\n    }\n    return target;\n\n    function accepted () {\n      var droppable = isContainer(target);\n      if (droppable === false) {\n        return false;\n      }\n\n      var immediate = getImmediateChild(target, elementBehindCursor);\n      var reference = getReference(target, immediate, clientX, clientY);\n      var initial = isInitialPlacement(target, reference);\n      if (initial) {\n        return true; // should always be able to drop it right back where it was\n      }\n      return o.accepts(_item, target, _source, reference);\n    }\n  }\n\n  function drag (e) {\n    if (!_mirror) {\n      return;\n    }\n    e.preventDefault();\n\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var x = clientX - _offsetX;\n    var y = clientY - _offsetY;\n\n    _mirror.style.left = x + 'px';\n    _mirror.style.top = y + 'px';\n\n    var item = _copy || _item;\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;\n    if (changed || dropTarget === null) {\n      out();\n      _lastDropTarget = dropTarget;\n      over();\n    }\n    var parent = getParent(item);\n    if (dropTarget === _source && _copy && !o.copySortSource) {\n      if (parent) {\n        parent.removeChild(item);\n      }\n      return;\n    }\n    var reference;\n    var immediate = getImmediateChild(dropTarget, elementBehindCursor);\n    if (immediate !== null) {\n      reference = getReference(dropTarget, immediate, clientX, clientY);\n    } else if (o.revertOnSpill === true && !_copy) {\n      reference = _initialSibling;\n      dropTarget = _source;\n    } else {\n      if (_copy && parent) {\n        parent.removeChild(item);\n      }\n      return;\n    }\n    if (\n      (reference === null && changed) ||\n      reference !== item &&\n      reference !== nextEl(item)\n    ) {\n      _currentSibling = reference;\n      dropTarget.insertBefore(item, reference);\n      drake.emit('shadow', item, dropTarget, _source);\n    }\n    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }\n    function over () { if (changed) { moved('over'); } }\n    function out () { if (_lastDropTarget) { moved('out'); } }\n  }\n\n  function spillOver (el) {\n    classes.rm(el, 'gu-hide');\n  }\n\n  function spillOut (el) {\n    if (drake.dragging) { classes.add(el, 'gu-hide'); }\n  }\n\n  function renderMirrorImage () {\n    if (_mirror) {\n      return;\n    }\n    var rect = _item.getBoundingClientRect();\n    _mirror = _item.cloneNode(true);\n    _mirror.style.width = getRectWidth(rect) + 'px';\n    _mirror.style.height = getRectHeight(rect) + 'px';\n    classes.rm(_mirror, 'gu-transit');\n    classes.add(_mirror, 'gu-mirror');\n    o.mirrorContainer.appendChild(_mirror);\n    touchy(documentElement, 'add', 'mousemove', drag);\n    classes.add(o.mirrorContainer, 'gu-unselectable');\n    drake.emit('cloned', _mirror, _item, 'mirror');\n  }\n\n  function removeMirrorImage () {\n    if (_mirror) {\n      classes.rm(o.mirrorContainer, 'gu-unselectable');\n      touchy(documentElement, 'remove', 'mousemove', drag);\n      getParent(_mirror).removeChild(_mirror);\n      _mirror = null;\n    }\n  }\n\n  function getImmediateChild (dropTarget, target) {\n    var immediate = target;\n    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {\n      immediate = getParent(immediate);\n    }\n    if (immediate === documentElement) {\n      return null;\n    }\n    return immediate;\n  }\n\n  function getReference (dropTarget, target, x, y) {\n    var horizontal = o.direction === 'horizontal';\n    var reference = target !== dropTarget ? inside() : outside();\n    return reference;\n\n    function outside () { // slower, but able to figure out any position\n      var len = dropTarget.children.length;\n      var i;\n      var el;\n      var rect;\n      for (i = 0; i < len; i++) {\n        el = dropTarget.children[i];\n        rect = el.getBoundingClientRect();\n        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }\n        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }\n      }\n      return null;\n    }\n\n    function inside () { // faster, but only available if dropped inside a child element\n      var rect = target.getBoundingClientRect();\n      if (horizontal) {\n        return resolve(x > rect.left + getRectWidth(rect) / 2);\n      }\n      return resolve(y > rect.top + getRectHeight(rect) / 2);\n    }\n\n    function resolve (after) {\n      return after ? nextEl(target) : target;\n    }\n  }\n\n  function isCopy (item, container) {\n    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);\n  }\n}\n\nfunction touchy (el, op, type, fn) {\n  var touch = {\n    mouseup: 'touchend',\n    mousedown: 'touchstart',\n    mousemove: 'touchmove'\n  };\n  var pointers = {\n    mouseup: 'pointerup',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove'\n  };\n  var microsoft = {\n    mouseup: 'MSPointerUp',\n    mousedown: 'MSPointerDown',\n    mousemove: 'MSPointerMove'\n  };\n  if (global.navigator.pointerEnabled) {\n    crossvent[op](el, pointers[type], fn);\n  } else if (global.navigator.msPointerEnabled) {\n    crossvent[op](el, microsoft[type], fn);\n  } else {\n    crossvent[op](el, touch[type], fn);\n    crossvent[op](el, type, fn);\n  }\n}\n\nfunction whichMouseButton (e) {\n  if (e.touches !== void 0) { return e.touches.length; }\n  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261\n  if (e.buttons !== void 0) { return e.buttons; }\n  var button = e.button;\n  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575\n    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);\n  }\n}\n\nfunction getOffset (el) {\n  var rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),\n    top: rect.top + getScroll('scrollTop', 'pageYOffset')\n  };\n}\n\nfunction getScroll (scrollProp, offsetProp) {\n  if (typeof global[offsetProp] !== 'undefined') {\n    return global[offsetProp];\n  }\n  if (documentElement.clientHeight) {\n    return documentElement[scrollProp];\n  }\n  return doc.body[scrollProp];\n}\n\nfunction getElementBehindPoint (point, x, y) {\n  var p = point || {};\n  var state = p.className;\n  var el;\n  p.className += ' gu-hide';\n  el = doc.elementFromPoint(x, y);\n  p.className = state;\n  return el;\n}\n\nfunction never () { return false; }\nfunction always () { return true; }\nfunction getRectWidth (rect) { return rect.width || (rect.right - rect.left); }\nfunction getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }\nfunction getParent (el) { return el.parentNode === doc ? null : el.parentNode; }\nfunction isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }\nfunction isEditable (el) {\n  if (!el) { return false; } // no parents were editable\n  if (el.contentEditable === 'false') { return false; } // stop the lookup\n  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain\n  return isEditable(getParent(el)); // contentEditable is set to 'inherit'\n}\n\nfunction nextEl (el) {\n  return el.nextElementSibling || manually();\n  function manually () {\n    var sibling = el;\n    do {\n      sibling = sibling.nextSibling;\n    } while (sibling && sibling.nodeType !== 1);\n    return sibling;\n  }\n}\n\nfunction getEventHost (e) {\n  // on touchend event, we have to use `e.changedTouches`\n  // see http://stackoverflow.com/questions/7192563/touchend-event-properties\n  // see https://github.com/bevacqua/dragula/issues/34\n  if (e.targetTouches && e.targetTouches.length) {\n    return e.targetTouches[0];\n  }\n  if (e.changedTouches && e.changedTouches.length) {\n    return e.changedTouches[0];\n  }\n  return e;\n}\n\nfunction getCoord (coord, e) {\n  var host = getEventHost(e);\n  var missMap = {\n    pageX: 'clientX', // IE8\n    pageY: 'clientY' // IE8\n  };\n  if (coord in missMap && !(coord in host) && missMap[coord] in host) {\n    coord = missMap[coord];\n  }\n  return host[coord];\n}\n\nmodule.exports = dragula;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n","import {createFrame, extend, toString} from './utils';\nimport Exception from './exception';\nimport {registerDefaultHelpers} from './helpers';\nimport {registerDefaultDecorators} from './decorators';\nimport logger from './logger';\n\nexport const VERSION = '4.0.10';\nexport const COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(`Attempting to register a partial called \"${name}\" as undefined`);\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple decorators'); }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  }\n};\n\nexport let log = logger.log;\n\nexport {createFrame, logger};\n","import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n\n","import {extend} from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n","\nconst errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n      line,\n      column;\n  if (loc) {\n    line = loc.start.line;\n    column = loc.start.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n","import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n","import {appendContextPath, createFrame, isArray} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.name);\n        options = {data: data};\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isArray, isFunction} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data,\n        contextPath;\n\n    if (options.data && options.ids) {\n      contextPath = appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) { context = context.call(this); }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else {\n        let priorKey;\n\n        for (let key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n","import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  });\n}\n","import {isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (isFunction(conditional)) { conditional = conditional.call(this); }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(... args);\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field) {\n    return obj && obj[field];\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (isFunction(context)) { context = context.call(this); }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n","import {indexOf} from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      let method = logger.methodMap[level];\n      if (!console[method]) {   // eslint-disable-line no-console\n        method = 'log';\n      }\n      console[method](...message);    // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n","/* global window */\nexport default function(Handlebars) {\n  /* istanbul ignore next */\n  let root = typeof global !== 'undefined' ? global : window,\n      $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n}\n","import * as Utils from './utils';\nimport Exception from './exception';\nimport { COMPILER_REVISION, REVISION_CHANGES, createFrame } from './base';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = compilerInfo && compilerInfo[0] || 1,\n        currentRevision = COMPILER_REVISION;\n\n  if (compilerRevision !== currentRevision) {\n    if (compilerRevision < currentRevision) {\n      const runtimeVersions = REVISION_CHANGES[currentRevision],\n            compilerVersions = REVISION_CHANGES[compilerRevision];\n      throw new Exception('Template was precompiled with an older version of Handlebars than the current runtime. ' +\n            'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n    } else {\n      // Use the embedded version info since the runtime doesn't know about this revision yet\n      throw new Exception('Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n            'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n    }\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as psuedo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n    let result = env.VM.invokePartial.call(this, partial, context, options);\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n      result = options.partials[options.name](context, options);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name) {\n      if (!(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj);\n      }\n      return obj[name];\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        if (depths[i] && depths[i][name] != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n          fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    merge: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && (param !== common)) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n        blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context/*, options*/) {\n      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n    }\n    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n    return main(context, options);\n  }\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      container.helpers = container.merge(options.helpers, env.helpers);\n\n      if (templateSpec.usePartial) {\n        container.partials = container.merge(options.partials, env.partials);\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = container.merge(options.decorators, env.decorators);\n      }\n    } else {\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n  };\n  return ret;\n}\n\nexport function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(container,\n        context,\n        container.helpers, container.partials,\n        options.data || data,\n        blockParams && [options.blockParams].concat(blockParams),\n        currentDepths);\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  const currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    // Wrapper function to get access to currentPartialBlock from the closure\n    let fn = options.fn;\n    partialBlock = options.data['partial-block'] = function partialBlockWrapper(context, options = {}) {\n\n      // Restore the partial-block from the closure for the execution of the block\n      // i.e. the part inside the block of the partial call.\n      options.data = createFrame(options.data);\n      options.data['partial-block'] = currentPartialBlock;\n      return fn(context, options);\n    };\n    if (fn.partials) {\n      options.partials = Utils.extend({}, options.partials, fn.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() { return ''; }\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n","// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n","const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n      possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj/* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexport {isFunction};\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray = Array.isArray || function(value) {\n  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;\n};\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) { return string; }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n","// Create a simple path alias to allow browserify to resolve\n// the runtime on a supported path.\nmodule.exports = require('./dist/cjs/handlebars.runtime')['default'];\n","module.exports = require(\"handlebars/runtime\")[\"default\"];\n","var si = typeof setImmediate === 'function', tick;\nif (si) {\n  tick = function (fn) { setImmediate(fn); };\n} else {\n  tick = function (fn) { setTimeout(fn, 0); };\n}\n\nmodule.exports = tick;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}